{
  "nbformat": 4,
  "nbformat_minor": 0,
  "metadata": {
    "colab": {
      "provenance": [],
      "authorship_tag": "ABX9TyOKHY/cyBkPv0i48rg/x7z4",
      "include_colab_link": true
    },
    "kernelspec": {
      "name": "python3",
      "display_name": "Python 3"
    },
    "language_info": {
      "name": "python"
    }
  },
  "cells": [
    {
      "cell_type": "markdown",
      "metadata": {
        "id": "view-in-github",
        "colab_type": "text"
      },
      "source": [
        "<a href=\"https://colab.research.google.com/github/apurav11/Python/blob/main/worksheet4%20(1024230101)\" target=\"_parent\"><img src=\"https://colab.research.google.com/assets/colab-badge.svg\" alt=\"Open In Colab\"/></a>"
      ]
    },
    {
      "cell_type": "markdown",
      "source": [
        "# **worksheet 4**"
      ],
      "metadata": {
        "id": "ihaHLATBZkdy"
      }
    },
    {
      "cell_type": "markdown",
      "source": [
        "Q1 ,2"
      ],
      "metadata": {
        "id": "PR3jAwkHZrYx"
      }
    },
    {
      "cell_type": "code",
      "source": [
        "import numpy as np\n",
        "\n",
        "\n",
        "arr_1=np.random.randint(4,26,size=(25))\n",
        "print(arr_1)\n",
        "print(arr_1.size)\n",
        "print(type(arr_1))\n",
        "print(arr_1.ndim)\n",
        "arr=np.random.randint(10,50,size=(4,3))\n",
        "print(arr)\n",
        "print(arr.size)\n",
        "print(arr.ndim)\n",
        "print(type(arr))"
      ],
      "metadata": {
        "colab": {
          "base_uri": "https://localhost:8080/"
        },
        "collapsed": true,
        "id": "yLydQu6gZq66",
        "outputId": "39bb1348-39c1-4ea8-8a52-3c1c27f5c45a"
      },
      "execution_count": 1,
      "outputs": [
        {
          "output_type": "stream",
          "name": "stdout",
          "text": [
            "[ 9 25  8 10 23 20 14 14  5 16 16 22 12 24 20  4 25 24  4 13 20 14 17  6\n",
            " 18]\n",
            "25\n",
            "<class 'numpy.ndarray'>\n",
            "1\n",
            "[[19 49 44]\n",
            " [29 47 35]\n",
            " [43 29 39]\n",
            " [25 33 30]]\n",
            "12\n",
            "2\n",
            "<class 'numpy.ndarray'>\n"
          ]
        }
      ]
    },
    {
      "cell_type": "markdown",
      "source": [
        "Q3"
      ],
      "metadata": {
        "id": "bsOw9ppQZ6T9"
      }
    },
    {
      "cell_type": "code",
      "source": [
        "\n",
        "arr=np.arange(2,11,2)\n",
        "print(arr)\n",
        "\n",
        "arr_1=np.arange(1,11,2)\n",
        "print(arr_1)\n",
        "a=arr_1+arr\n",
        "s=arr_1-arr\n",
        "m=arr_1*arr\n",
        "d=arr_1/arr\n",
        "print(\"\\n\")\n",
        "print(a)\n",
        "print(s)\n",
        "print(m)\n",
        "print(d)"
      ],
      "metadata": {
        "colab": {
          "base_uri": "https://localhost:8080/"
        },
        "collapsed": true,
        "id": "k-1OJRn9Z9X8",
        "outputId": "f0e3340c-fc38-4cd2-c694-005069bf7a2c"
      },
      "execution_count": 5,
      "outputs": [
        {
          "output_type": "stream",
          "name": "stdout",
          "text": [
            "[ 2  4  6  8 10]\n",
            "[1 3 5 7 9]\n",
            "\n",
            "\n",
            "[ 3  7 11 15 19]\n",
            "[-1 -1 -1 -1 -1]\n",
            "[ 2 12 30 56 90]\n",
            "[0.5        0.75       0.83333333 0.875      0.9       ]\n"
          ]
        }
      ]
    },
    {
      "cell_type": "markdown",
      "source": [
        "Q4"
      ],
      "metadata": {
        "id": "oaPC4c9iaJIt"
      }
    },
    {
      "cell_type": "code",
      "source": [
        "\n",
        "arr=np.random.randint(1,10,size=(3,3))\n",
        "print(arr)\n",
        "print(arr*5)\n"
      ],
      "metadata": {
        "colab": {
          "base_uri": "https://localhost:8080/"
        },
        "collapsed": true,
        "id": "Lpo-sRJaaKfN",
        "outputId": "a794f252-beac-4876-a31c-1f65ffe9b738"
      },
      "execution_count": 3,
      "outputs": [
        {
          "output_type": "stream",
          "name": "stdout",
          "text": [
            "[[5 8 1]\n",
            " [2 1 1]\n",
            " [4 2 4]]\n",
            "[[25 40  5]\n",
            " [10  5  5]\n",
            " [20 10 20]]\n"
          ]
        }
      ]
    },
    {
      "cell_type": "markdown",
      "source": [
        "**Q5**"
      ],
      "metadata": {
        "id": "GsVoFDPRaWDG"
      }
    },
    {
      "cell_type": "code",
      "source": [
        "\n",
        "arr=np.random.randint(10,25,size=(9,4))\n",
        "print(arr)\n",
        "ans=arr[1,0:2]\n",
        "print(ans)\n",
        "yns=arr[1:,0]\n",
        "print(yns)\n",
        "\n"
      ],
      "metadata": {
        "colab": {
          "base_uri": "https://localhost:8080/"
        },
        "collapsed": true,
        "id": "rNt3v6ZNaYdG",
        "outputId": "b7163aed-e3ae-4a1c-e82d-38611c8936d2"
      },
      "execution_count": 2,
      "outputs": [
        {
          "output_type": "stream",
          "name": "stdout",
          "text": [
            "[[20 23 22 22]\n",
            " [13 23 16 14]\n",
            " [15 10 17 19]\n",
            " [14 17 13 13]\n",
            " [12 22 22 17]\n",
            " [11 21 24 22]\n",
            " [23 12 15 13]\n",
            " [13 15 12 22]\n",
            " [10 17 21 20]]\n",
            "[13 23]\n",
            "[13 15 14 12 11 23 13 10]\n"
          ]
        }
      ]
    },
    {
      "cell_type": "markdown",
      "source": [
        "**Q6**"
      ],
      "metadata": {
        "id": "rR7NURxgalof"
      }
    },
    {
      "cell_type": "code",
      "source": [
        "\n",
        "arr=np.random.randint(20,40,size=(4,4))\n",
        "print(arr)\n",
        "ans=arr>25\n",
        "print(ans)\n",
        "arr=arr[ans]\n",
        "print(arr)\n"
      ],
      "metadata": {
        "colab": {
          "base_uri": "https://localhost:8080/"
        },
        "collapsed": true,
        "id": "Y4NvBvQnanS3",
        "outputId": "2c6a8cb3-d564-4908-8504-38b6fdd9cc99"
      },
      "execution_count": 6,
      "outputs": [
        {
          "output_type": "stream",
          "name": "stdout",
          "text": [
            "[[21 39 35 31]\n",
            " [30 39 22 34]\n",
            " [36 21 31 23]\n",
            " [22 27 26 23]]\n",
            "[[False  True  True  True]\n",
            " [ True  True False  True]\n",
            " [ True False  True False]\n",
            " [False  True  True False]]\n",
            "[39 35 31 30 39 34 36 31 27 26]\n"
          ]
        }
      ]
    },
    {
      "cell_type": "markdown",
      "source": [
        "**Q7**"
      ],
      "metadata": {
        "id": "PxxNmaPwavwZ"
      }
    },
    {
      "cell_type": "code",
      "source": [
        "arr=np.random.randint(11,size=(12))\n",
        "print(arr)\n",
        "print(\"\\n\")\n",
        "arr=np.random.randint(11,size=(12)).reshape(4,3)\n",
        "print(arr)"
      ],
      "metadata": {
        "colab": {
          "base_uri": "https://localhost:8080/"
        },
        "collapsed": true,
        "id": "9X4NpPALax0Z",
        "outputId": "a377b035-c54e-420b-996f-350f9d747f5c"
      },
      "execution_count": 8,
      "outputs": [
        {
          "output_type": "stream",
          "name": "stdout",
          "text": [
            "[6 5 5 5 6 3 1 0 6 5 1 1]\n",
            "\n",
            "\n",
            "[[ 6  7  4]\n",
            " [ 6  5  5]\n",
            " [10  2 10]\n",
            " [10  6 10]]\n"
          ]
        }
      ]
    },
    {
      "cell_type": "markdown",
      "source": [
        "Q8"
      ],
      "metadata": {
        "id": "9uc0rVxhbKLz"
      }
    },
    {
      "cell_type": "code",
      "source": [
        "arr=np.arange(1,5).reshape(2,2)\n",
        "print(\"A=\",arr)\n",
        "arr_1=np.arange(5,9).reshape(2,2)\n",
        "print(\"B=\",arr_1)\n",
        "print(\"\\n\")\n",
        "\n",
        "c=np.dot(arr,arr_1)\n",
        "print(\"AxB=\",c)\n",
        "print(\"\\n\")\n",
        "\n",
        "a=arr.T\n",
        "print(a)"
      ],
      "metadata": {
        "colab": {
          "base_uri": "https://localhost:8080/"
        },
        "collapsed": true,
        "id": "m4yX4h9MbM5s",
        "outputId": "f39a88ad-1a61-4528-cf38-0c714b99edfd"
      },
      "execution_count": 17,
      "outputs": [
        {
          "output_type": "stream",
          "name": "stdout",
          "text": [
            "A= [[1 2]\n",
            " [3 4]]\n",
            "B= [[5 6]\n",
            " [7 8]]\n",
            "\n",
            "\n",
            "AxB= [[19 22]\n",
            " [43 50]]\n",
            "\n",
            "\n",
            "[[1 3]\n",
            " [2 4]]\n"
          ]
        }
      ]
    },
    {
      "cell_type": "markdown",
      "source": [
        "**Q9**"
      ],
      "metadata": {
        "id": "nuYK-hOTc7mV"
      }
    },
    {
      "cell_type": "code",
      "source": [
        "arr=np.random.randint(10,60,size=(15))\n",
        "print(arr)\n",
        "print(np.mean(arr))\n",
        "print(np.median(arr))\n",
        "print(np.std(arr))"
      ],
      "metadata": {
        "colab": {
          "base_uri": "https://localhost:8080/"
        },
        "collapsed": true,
        "id": "0P0pooyoc-Ru",
        "outputId": "46bbc205-82be-467b-f069-3f8f25024368"
      },
      "execution_count": 19,
      "outputs": [
        {
          "output_type": "stream",
          "name": "stdout",
          "text": [
            "[29 31 26 21 30 58 44 38 13 55 18 41 24 52 38]\n",
            "34.53333333333333\n",
            "31.0\n",
            "13.159871664352286\n"
          ]
        }
      ]
    },
    {
      "cell_type": "markdown",
      "source": [
        "**Q10**"
      ],
      "metadata": {
        "id": "E-lZHPOag2lt"
      }
    },
    {
      "cell_type": "code",
      "source": [
        "arr=np.random.randint(1,10,size=(3,3))\n",
        "print(arr)\n",
        "print(\"\\n\")\n",
        "a=np.linalg.det(arr)\n",
        "print(a)\n",
        "b=np.linalg.inv(arr)\n",
        "print(b)\n",
        "c=np.linalg.eig(arr)\n",
        "print(c)"
      ],
      "metadata": {
        "colab": {
          "base_uri": "https://localhost:8080/"
        },
        "collapsed": true,
        "id": "2vhIl46sg4v-",
        "outputId": "97411e2f-3fe4-400f-fc12-bbc1ba16c692"
      },
      "execution_count": 27,
      "outputs": [
        {
          "output_type": "stream",
          "name": "stdout",
          "text": [
            "[[8 9 5]\n",
            " [8 5 2]\n",
            " [5 1 2]]\n",
            "\n",
            "\n",
            "-74.99999999999997\n",
            "[[-0.10666667  0.17333333  0.09333333]\n",
            " [ 0.08        0.12       -0.32      ]\n",
            " [ 0.22666667 -0.49333333  0.42666667]]\n",
            "EigResult(eigenvalues=array([16.70655991, -3.13742996,  1.43087004]), eigenvectors=array([[ 0.76346081,  0.66158019, -0.00278162],\n",
            "       [ 0.57273048, -0.51688298, -0.48408882],\n",
            "       [ 0.2985086 , -0.54327124,  0.87501444]]))\n"
          ]
        }
      ]
    },
    {
      "cell_type": "markdown",
      "source": [
        "## **Q11**"
      ],
      "metadata": {
        "id": "KK3t7EwjjuJQ"
      }
    },
    {
      "cell_type": "code",
      "source": [
        "import numpy as np\n",
        "\n",
        "pos= np.array([[0,0], [2,3], [4,7], [7,10], [10,15]])\n",
        "#now for euclidon dist.\n",
        "d=np.linalg.norm(pos[-1]-pos[0])\n",
        "print(d)\n",
        "\n",
        "steps=np.diff(pos,axis=0)\n",
        "distance=np.linalg.norm(steps,axis=1)\n",
        "total=np.sum(distance)\n",
        "print(d)\n",
        "print(total)\n"
      ],
      "metadata": {
        "colab": {
          "base_uri": "https://localhost:8080/"
        },
        "id": "7JK7suFGk33H",
        "outputId": "38bb2285-6734-47fb-cb4f-d91b0b4b43dc"
      },
      "execution_count": 29,
      "outputs": [
        {
          "output_type": "stream",
          "name": "stdout",
          "text": [
            "Direct (first-to-last) distance: 18.027756377319946\n",
            "Total step-by-step distance: 18.151279812428157\n"
          ]
        }
      ]
    }
  ]
}